{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactsView.module.css","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.container.jsx","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.jsx","components/Filter/Filter.jsx","components/Filter/Filter.container.jsx","views/ContactsView/ContactsView.jsx"],"names":["module","exports","ContactForm","state","name","number","notifyWarn","text","toast","warn","notifySuccess","success","handleChange","e","currentTarget","value","setState","replace","isValidContact","newContact","toLowerCase","items","props","find","contact","reset","handleSubmit","preventDefault","addContact","this","MyButton","styled","MaterialButton","width","backgroundColor","color","boxShadow","className","styles","form","onSubmit","TextField","input","size","label","variant","type","onChange","id","nameInputId","autoComplete","numberInputId","Component","connect","contactsSelectors","getItems","dispatch","contactsOperations","fontSize","padding","MyListItem","ListItem","borderBottom","display","ContactItem","onDelete","item","ListItemText","info","ListItemSecondaryAction","delete","onClick","ContactList","contacts","deleteContact","List","map","filteredItems","contactId","Filter","resetFilter","filter","getFilter","contactsActions","changeFilter","ContactsView","fetchContacts","title","contactsSection","length","position","autoClose","newestOnTop","limit","transition","Zoom"],"mappings":"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","file":"static/js/ContactsView.b7bcf14e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__37MmD\",\"input\":\"ContactForm_input__VNzH8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ContactItem_info__DZFTi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formTitle\":\"Filter_formTitle__3IEyP\",\"input\":\"Filter_input__2SR0d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactsView_title__3luFy\",\"contactsSection\":\"ContactsView_contactsSection__1-nab\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport { toast } from 'react-toastify';\n\nimport MaterialButton from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { styled } from '@material-ui/core/styles';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  notifyWarn = text => toast.warn(text);\n  notifySuccess = text => toast.success(text);\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    name === 'number'\n      ? this.setState({ [name]: value.replace(/[^\\d-]/g, '') })\n      : this.setState({ [name]: value });\n  };\n\n  isValidContact = newContact => {\n    const name = newContact.name.toLowerCase();\n    const { number } = newContact;\n    const { items } = this.props;\n\n    if (name === '' || number === '') {\n      this.notifyWarn(`Please enter name and number`);\n      return true;\n    }\n\n    if (items.find(contact => contact.name.toLowerCase() === name)) {\n      this.notifyWarn(`${newContact.name} is already in contacts.`);\n      return true;\n    }\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = { ...this.state };\n    if (!this.isValidContact(newContact)) {\n      const { addContact } = this.props;\n\n      addContact(newContact);\n      this.notifySuccess('Added successfully');\n      this.reset();\n    }\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    const MyButton = styled(MaterialButton)({\n      width: 'fit-content',\n      backgroundColor: 'olive',\n      color: 'rgba(0, 0, 0, 0.87)',\n      boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\n    });\n\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <TextField\n          className={styles.input}\n          size=\"small\"\n          label=\"Name\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.handleChange}\n          id={this.nameInputId}\n          autoComplete=\"off\"\n        />\n\n        <TextField\n          size=\"small\"\n          label=\"Number\"\n          variant=\"outlined\"\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={this.handleChange}\n          id={this.numberInputId}\n          autoComplete=\"off\"\n        />\n\n        <MyButton type=\"submit\">Add contact</MyButton>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n  items: PropTypes.array.isRequired,\n};\n\nexport default ContactForm;\n","import { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport ContactForm from './ContactForm';\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: newContact => dispatch(contactsOperations.addContact(newContact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\nimport styles from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MaterialButton from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\n\nconst MyButton = styled(MaterialButton)({\n  backgroundColor: 'olive',\n  fontSize: '10px',\n  color: 'rgba(0, 0, 0, 0.87)',\n  boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\n  padding: '2px 8px',\n});\n\nconst MyListItem = styled(ListItem)({\n  padding: '8px 0 8px 10px',\n  borderBottom: '1px solid olive',\n  display: 'inline-block',\n});\n\nconst ContactItem = ({ name, number, onDelete }) => (\n  <MyListItem className={styles.item}>\n    <ListItemText className={styles.info}>{name}:</ListItemText>\n    <ListItemText className={styles.info}>{number}</ListItemText>\n    <ListItemSecondaryAction>\n      <MyButton className={styles.delete} onClick={onDelete} type=\"button\">\n        Delete\n      </MyButton>\n    </ListItemSecondaryAction>\n  </MyListItem>\n);\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;","import React from 'react';\nimport ContactItem from './ContactItem';\nimport PropTypes from 'prop-types';\n\nimport List from '@material-ui/core/List';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <List>\n      {contacts &&\n        contacts.map(({ id, name, number }) => (\n          <ContactItem\n            key={id}\n            name={name}\n            number={number}\n            onDelete={() => deleteContact(id)}\n          />\n        ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;","import { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.filteredItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: contactId =>\n    dispatch(contactsOperations.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nimport TextField from '@material-ui/core/TextField';\n\nclass Filter extends Component {\n  componentWillUnmount() {\n    this.props.resetFilter();\n  }\n\n  render() {\n    const { filter, onChange } = this.props;\n\n    return (\n      <TextField\n        className={styles.input}\n        type=\"text\"\n        value={filter}\n        onChange={onChange}\n        label=\"Find contacts by name\"\n        size=\"small\"\n        variant=\"outlined\"\n      />\n    );\n  }\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  resetFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;","  \nimport { connect } from 'react-redux';\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.currentTarget.value)),\n  resetFilter: () => dispatch(contactsActions.resetFilter()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ContactForm from \"../../components/ContactForm\";\nimport ContactList from \"../../components/ContactList\";\nimport Filter from \"../../components/Filter\";\nimport { ToastContainer, Zoom } from \"react-toastify\";\nimport { connect } from \"react-redux\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\nimport styles from \"./ContactsView.module.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { items } = this.props;\n\n    return (\n      <>\n        <h1 className={styles.title}>Телефонна книга</h1>\n        <ContactForm />\n        <h2 className={styles.title}>Контакти:</h2>\n        <section className={styles.contactsSection}>\n          {items.length > 1 && <Filter />}\n          {items.length > 0 ? (\n            <ContactList />\n          ) : (\n            <p>The contact list is empty. Please add a new contact.</p>\n          )}\n          <ToastContainer\n            position=\"top-center\"\n            autoClose={2000}\n            newestOnTop\n            limit={3}\n            transition={Zoom}\n          />\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  items: contactsSelectors.getItems(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nContactsView.propTypes = {\n  items: PropTypes.array.isRequired,\n  fetchContacts: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n"],"sourceRoot":""}